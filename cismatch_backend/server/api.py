import json
from django.conf import settings
from .froms import ThirdPartyServerForm
from .serializers import ThirdPartyServerSerializer
from rest_framework.decorators import api_view, authentication_classes, permission_classes, parser_classes
from rest_framework import status
from .models import Server, ServerType, ThirdPartyServer
import a2s
from django.http import JsonResponse
from django.contrib.auth import get_user_model
from rest_framework.parsers import MultiPartParser, FormParser
from django.shortcuts import get_object_or_404


User = get_user_model()

@api_view(['GET'])
@authentication_classes([])
@permission_classes([])
def get_server(request):
        servers = Server.objects.all()
        server_data = []

        for server in servers:
            try:
                server_info = (server.ip, server.port)
                info = a2s.info(server_info)
                player_count = info.player_count
                max_players = info.max_players
                map_image_url = f"{settings.WEBSITE_URL}/media/servers/maps/{info.map_name}.webp"
                map_icon_url = f"{settings.WEBSITE_URL}/media/servers/icons/{info.map_name}.png"
                server_data.append({
                    'id': str(server.id),
                    'ip': server.ip,
                    'port': server.port,
                    'published': server.published,
                    'name': info.server_name,
                    'map': info.map_name,
                    'ping': info.ping,
                    'current_players': player_count,
                    'max_players': max_players,
                    'map_image': map_image_url,
                    'map_icon': map_icon_url
                })

            except Exception as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                server_data.append({
                    'id': str(server.id),
                    'ip': server.ip,
                    'port': server.port,
                    'error': str(e)
                })

        return JsonResponse({'data': server_data}, safe=False, status=200)



@api_view(['GET'])
@authentication_classes([])
@permission_classes([])
def get_third_party_servers(request):
    servers = ThirdPartyServer.objects.all()
    server_data = []

    for server in servers:
        try:
            server_info = (server.ip, server.port)
            info = a2s.info(server_info)
            player_count = info.player_count
            max_players = info.max_players
            map_image_url = f"{settings.WEBSITE_URL}/media/servers/maps/{info.map_name}.webp"
            map_icon_url = f"{settings.WEBSITE_URL}/media/servers/icons/{info.map_name}.png"

            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä
            serializer = ThirdPartyServerSerializer(server)
            server_info = serializer.data

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            server_info.update({
                'name': info.server_name,
                'map': info.map_name,
                'ping': info.ping,
                'current_players': player_count,
                'max_players': max_players,
                'map_image': map_image_url,
                'map_icon': map_icon_url,
            })

            server_data.append(server_info)
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            server_data.append({
                'id': str(server.id),
                'ip': server.ip,
                'port': server.port,
                'error': str(e)
            })

    return JsonResponse({'data': server_data}, safe=False, status=200)


@api_view(['GET'])
@authentication_classes([])
@permission_classes([])
def get_user_servers(request):
    user_id = request.GET.get('user_id')  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

    if not user_id:
        return JsonResponse({'error': 'user_id –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}, status=400)

    servers = ThirdPartyServer.objects.filter(owner_id=user_id)  # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    server_data = []

    for server in servers:
        try:
            server_info = (server.ip, server.port)
            info = a2s.info(server_info)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ a2s
            player_count = info.player_count
            max_players = info.max_players
            map_image_url = f"{settings.WEBSITE_URL}/media/servers/maps/{info.map_name}.webp"
            map_icon_url = f"{settings.WEBSITE_URL}/media/servers/icons/{info.map_name}.png"
            

            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä
            serializer = ThirdPartyServerSerializer(server)
            server_info = serializer.data

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            server_info.update({
                'name': info.server_name,
                'map': info.map_name,
                'ping': info.ping,
                'current_players': player_count,
                'max_players': max_players,
                'map_image': map_image_url,
                'map_icon': map_icon_url,
            })

            server_data.append(server_info)
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            server_data.append({
                'id': str(server.id),
                'ip': server.ip,
                'port': server.port,
                'error': str(e)
            })

    return JsonResponse({'data': server_data}, safe=False, status=200)

@api_view(['POST'])
@permission_classes([])  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
@parser_classes([MultiPartParser, FormParser])  # –†–∞–∑—Ä–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É multipart/form-data
def create_third_party_server(request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    """
    form = ThirdPartyServerForm(request.data)  # request.data –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ —Ñ–∞–π–ª—ã

    if form.is_valid():
        third_party_server = form.save(commit=False)
        third_party_server.owner = request.user  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        third_party_server.save()

        return JsonResponse({'success': True, 'data': third_party_server.id}, status=201)

    return JsonResponse({'errors': form.errors}, status=400)

    
@api_view(['GET'])
@authentication_classes([])
@permission_classes([])
def get_server_types(request):
    server_types = ServerType.objects.all().values('id', 'title')  # –ü–æ–ª—É—á–∞–µ–º id –∏ name —Ç–∏–ø–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤
    return JsonResponse(list(server_types), safe=False)

@api_view(['DELETE'])
def delete_server(request, server_id):
    """
    API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –£–¥–∞–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.
    """
    server = get_object_or_404(ThirdPartyServer, id=server_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ—Ä–≤–µ—Ä–∞
    if server.owner != request.user:
        return JsonResponse({'error': '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ—Ä–≤–µ—Ä–∞'}, status=403)

    server.delete()
    return JsonResponse({'message': '–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'}, status=200)


@api_view(['PUT'])
def update_third_party_server(request, server_id):
    """ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞ (PUT) """
    server = get_object_or_404(ThirdPartyServer, id=server_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞
    if server.owner != request.user:
        return JsonResponse({'error': '–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞'}, status=403)

    print('üìå request.data:', request.data)  # –û—Ç–ª–∞–¥–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print('üìå request.FILES:', request.FILES)  # –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤

    form = ThirdPartyServerForm(request.data, request.FILES, instance=server)  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã

    if form.is_valid():
        server = form.save()
        return JsonResponse({'success': True, 'data': {'id': server.id, 'description': server.description, 'ip': server.ip, 'port': server.port, 'server_type': server.server_type.id }})

    print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', form.errors, form.non_field_errors)
    return JsonResponse({'errors': form.errors.as_json()}, status=400)