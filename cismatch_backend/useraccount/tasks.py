import logging
from datetime import timedelta
import time
from celery import shared_task
from .models import SkinBuyOrder
from steam_client import client
from django.db import transaction
from django.utils import timezone

logger = logging.getLogger(__name__)

@shared_task
def check_trade_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥—ã"""
    for attempt in range(3):  # –î–µ–ª–∞–µ–º 3 –ø–æ–ø—ã—Ç–∫–∏
        trade_offers = client.get_trade_offers(get_sent_offers=True)
        print(f"üì© –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}. –û—Ç–≤–µ—Ç API:", trade_offers)

        if "response" in trade_offers and "trade_offers_sent" in trade_offers["response"]:
            sent_trades = trade_offers["response"]["trade_offers_sent"]
            
            for trade in sent_trades:
                trade_id = trade["tradeofferid"]
                state = trade["trade_offer_state"]
                print(f"üîé –¢—Ä–µ–π–¥ {trade_id}: —Å—Ç–∞—Ç—É—Å {state}")

            return sent_trades  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–æ–≤

        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–æ–≤! –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
        time.sleep(5)

    return []  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫


@shared_task
def reject_old_approved_orders():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ 'approved',
    –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∏—Ö –≤ —Å—Ç–∞—Ç—É—Å 'rejected'.
    """
    time_threshold = timezone.now() - timedelta(hours=24)

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å–µ "approved", —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
    old_orders = SkinBuyOrder.objects.filter(status="approved", created_at__lte=time_threshold)

    if old_orders.exists():
        count = old_orders.update(status="rejected")
        logger.info(f"‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ {count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.")
    else:
        logger.info("‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
        
        
        
#@shared_task
#def send_trade_offer(user_id, asset_id, skin_name, offer_price, trade_url):
#    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–π–¥-–æ—Ñ—Ñ–µ—Ä–∞ —á–µ—Ä–µ–∑ Celery"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
#    if not client.is_session_alive():
#        print("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è...")
#
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
#        login_status = asyncio.run(start_bot())  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

#        if not login_status:
#            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
#            return "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"

    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥
#    result = create_trade_offer(user_id, asset_id, skin_name, offer_price, trade_url)
#    return result