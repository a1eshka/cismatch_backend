import os
import time
import json
import base64
import hmac
import struct
import traceback
import requests
from steam.guard import SteamAuthenticator
from hashlib import sha1
import steam.webauth as wa
from .models import SkinBuyOrder,User
from steam.steamid import SteamID

STEAM_API_KEY = os.getenv("STEAM_API_KEY")
STEAM_USERNAME = os.getenv("STEAM_USERNAME")
STEAM_PASSWORD = os.getenv("STEAM_PASSWORD")
SHARED_SECRET = os.getenv("STEAM_SHARED_SECRET")
IDENTITY_SECRET = os.getenv("STEAM_IDENTITY_SECRET")

def generate_steam_guard_code(shared_secret):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 2FA-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Steam"""
    timestamp = int(time.time()) // 30  # Steam –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 30-—Å–µ–∫—É–Ω–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    hmac_generator = hmac.new(base64.b64decode(shared_secret), struct.pack(">Q", timestamp), sha1)
    hmac_hash = hmac_generator.digest()
    
    start = hmac_hash[19] & 0x0F
    full_code = struct.unpack(">I", hmac_hash[start:start + 4])[0] & 0x7FFFFFFF

    chars = "23456789BCDFGHJKMNPQRTVWXY"
    code = ""

    for _ in range(5):
        code += chars[full_code % len(chars)]
        full_code //= len(chars)

    return code

def steam_login():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Steam —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º steam.webauth"""
    try:
        print(f"üîπ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {STEAM_USERNAME}...")
        auth = wa.WebAuth(STEAM_USERNAME)

        # üî∏ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø–∞—Ä–æ–ª–µ–º
        print("üîπ –í—Ö–æ–¥ —Å –ø–∞—Ä–æ–ª–µ–º...")
        session = auth.login(STEAM_PASSWORD)

    except wa.TwoFactorCodeRequired:
        print("üîπ –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA-–∫–æ–¥. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...")
        guard_code = generate_steam_guard_code(SHARED_SECRET)
        print(f"üîπ 2FA-–∫–æ–¥: {guard_code}")

                # üîπ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ —Å 2FA-–∫–æ–¥–æ–º
        try:
            session = auth.login(twofactor_code=guard_code)
        except KeyError:
            print("‚ùå –û—à–∏–±–∫–∞: Steam –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return None, None

    except wa.EmailCodeRequired:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ email. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return None, None

    except wa.CaptchaRequired:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –∫–∞–ø—á–∏. –í—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ.")
        return None, None

    except wa.LoginIncorrect:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
        return None, None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Steam: {e}")
        return None, None

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
    if session and hasattr(session, "cookies") and "sessionid" in session.cookies:
        print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Steam!")
        sessionid = session.cookies["sessionid"]
        cookies = session.cookies.get_dict()
        print(f"üîπ SESSION ID: {sessionid}")
        print(f"üîπ Cookies: {cookies}")
        return sessionid, cookies
    else:
        print("‚ùå –û—à–∏–±–∫–∞: Steam –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return None, None
    

def create_trade_offer(user_id, asset_id, skin_name, offer_price, image_url):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–π–¥-–æ—Ñ—Ñ–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    result = steam_login()  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ steam_login
    if result is None:
        print("‚ùå –û—à–∏–±–∫–∞: steam_login() –≤–µ—Ä–Ω—É–ª None")
        return None  # –í–µ—Ä–Ω–µ–º None, –µ—Å–ª–∏ login –Ω–µ —É–¥–∞–ª–æ—Å—å

    session_id, cookies = result  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏
    print('result:', result)
    user = User.objects.get(id=user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    steam64_id = user.steam_id
    steamid32 = SteamID(steam64_id).as_32
    steam_id = steamid32
    print('steamid:', steam_id)

    trade_offer_data = {
        "sessionid": session_id,
        "serverid": "1",
        "partner": steam_id,
        "tradeoffermessage": f"–ü—Ä–æ–¥–∞–∂–∞ {skin_name} –∑–∞ {offer_price} ‚ÇΩ",
        "json_tradeoffer": json.dumps({
            "newversion": True,
            "version": 2,
            "me": {
                "assets": [{"appid": 730, "contextid": "2", "assetid": asset_id}],
                "currency": [],
                "ready": False,
            },
            "them": {
                "assets": [],
                "currency": [],
                "ready": False,
            },
        }),
        "trade_offer_create_params": json.dumps({}),
        "captcha": "",
    }

    headers = {
        "Referer": f"https://steamcommunity.com/tradeoffer/new/?partner={steam_id}",
        "Origin": "https://steamcommunity.com",
        "Content-Type": "application/x-www-form-urlencoded",
    }

    response = requests.post(
        "https://steamcommunity.com/tradeoffer/new/send",
        data=trade_offer_data,
        headers=headers,
        cookies=cookies,
    )

    if response.status_code == 200:
        trade_offer_id = response.json().get("tradeofferid")
        print(f"‚úÖ –¢—Ä–µ–π–¥-–æ—Ñ—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ID: {trade_offer_id}")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É
        SkinBuyOrder.objects.create(
            user=user,
            asset_id=asset_id,
            skin_name=skin_name,
            offer_price=offer_price,
            trade_offer_id=trade_offer_id,
            image_url=image_url,
            status="pending"
        )

        confirm_trade_offer(cookies)  # –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        return trade_offer_id
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–π–¥–∞: {response.text}")
        return None

def generate_confirmation_key(identity_secret, tag="conf"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤"""
    timestamp = int(time.time())
    hmac_generator = hmac.new(base64.b64decode(identity_secret), struct.pack(">Q", timestamp) + tag.encode(), sha1)
    return base64.b64encode(hmac_generator.digest()).decode()

def confirm_trade_offer(cookies):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ç—Ä–µ–π–¥—ã"""
    sessionid = cookies.get("sessionid")
    steamid = cookies.get("steamLoginSecure").split("%7C%7C")[0]
    
    confirmation_key = generate_confirmation_key(IDENTITY_SECRET, "conf")
    url = f"https://steamcommunity.com/mobileconf/conf"
    
    params = {
        "p": "android",
        "a": steamid,
        "k": confirmation_key,
        "t": int(time.time()),
        "m": "android",
        "tag": "conf",
    }

    headers = {"Referer": "https://steamcommunity.com/mobileconf"}

    response = requests.get(url, params=params, cookies=cookies, headers=headers)
    if response.status_code == 200:
        print("‚úÖ –¢—Ä–µ–π–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞")
        return False
